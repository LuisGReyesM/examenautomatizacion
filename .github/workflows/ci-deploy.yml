name: Deployment Pipeline

on:
  workflow_run:
    workflows: ["Java CI"]   # Este pipeline se dispara solo si el CI (build + test) pasa
    types:
      - completed
    branches:
      - ci-deploy           # Rama donde corre el despliegue

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      CANARY_NAMESPACE: canary
      BLUE_NAMESPACE: blue
      GREEN_NAMESPACE: green
      IMAGE_NAME: examen-app
      VERSION: latest

    steps:
      # ================================
      # STAGE: Checkout del código
      # ================================
      - uses: actions/checkout@v3

      # ================================
      # STAGE: Set up JDK
      # ================================
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # ================================
      # STAGE: Build JAR con Maven
      # ================================
      - name: Build JAR
        run: mvn -B package --file pom.xml

      # ================================
      # STAGE: Verificar que el JAR existe
      # ================================
      - name: Verify JAR exists
        run: ls -l target/ExamenAutomatizacion-0.0.1-SNAPSHOT.jar

      # ================================
      # STAGE: Build Docker image
      # ================================
      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:$VERSION .

      # ================================
      # STAGE: Deploy Canary
      # Aquí levantamos la app en modo Canary para probarla
      # ================================
      - name: Deploy Canary
        run: |
          echo "Desplegando aplicación en contenedor Docker (Canary)"
          docker run -d -p 8080:8080 --name ${IMAGE_NAME}-canary $IMAGE_NAME:$VERSION

      # ================================
      # STAGE: Acceptance Tests en Canary
      # ================================
      - name: Run Acceptance Tests
        run: |
          echo "Esperando que la aplicación esté lista en Canary..."
          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/actuator/health || true)
            if [ "$STATUS" -eq 200 ]; then
              echo "Aplicación lista!"
              break
            fi
            sleep 2
          done

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/actuator/health || true)
          if [ "$STATUS" -ne 200 ]; then
            echo "Tests fallaron: /actuator/health no respondió con 200"
            docker logs ${IMAGE_NAME}-canary
            docker rm -f ${IMAGE_NAME}-canary
            exit 1
          fi

          echo "Tests OK en Canary"

      # ================================
      # STAGE: Deploy Green
      # Aquí levantamos el nuevo contenedor en paralelo (puerto 8081)
      # ================================
      - name: Deploy Green
        run: |
          echo "Desplegando Green en puerto 8081..."
          docker run -d -p 8081:8080 --name ${IMAGE_NAME}-green $IMAGE_NAME:$VERSION

          echo "Esperando que Green esté listo..."
          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/actuator/health || true)
            if [ "$STATUS" -eq 200 ]; then
              echo "Green listo!"
              break
            fi
            sleep 2
          done

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/actuator/health || true)
          if [ "$STATUS" -ne 200 ]; then
            echo "Green falló! Rollback a Canary..."
            docker rm -f ${IMAGE_NAME}-green
            exit 1
          fi

          echo "Green validado. Eliminando Canary..."
          docker rm -f ${IMAGE_NAME}-canary
          echo "Switch de tráfico completado a Green"

      # ================================
      # STAGE: Cleanup (garantizar limpieza de contenedores)
      # ================================
      - name: Cleanup
        if: always()
        run: |
          echo "Limpiando contenedores viejos..."
          docker rm -f ${IMAGE_NAME}-canary || true
          docker rm -f ${IMAGE_NAME}-green || true

      # ================================
      # STAGE: Notificación final
      # ================================
      - name: Notify Team
        run: |
          echo "Despliegue completado exitosamente o rollback realizado si fue necesario"
